# Wrapper for common.ctest used to run dashboards for catalyst editions.
# Essentially, this file call common.ctest multiple times for each edition to
# build and test.

cmake_minimum_required(VERSION 2.8)
# Avoid non-ascii characters in tool output.
set(ENV{LC_ALL} C)

include("${ctest_extra_options_file}")

#------------------------------------------------------------------------
# NOTE: Also see common.ctest
set (CTEST_USE_LAUNCHERS 1)
# This sets the CTEST_USE_LAUNCHERS variable appropriately i.e. set it to 0
# if not supported.
# Requires that CMAKE_GENERATOR is set properly, so we set it.
set (CMAKE_GENERATOR ${CTEST_CMAKE_GENERATOR})
include(CTestUseLaunchers)

if(WIN32 AND (CMAKE_VERSION VERSION_LESS "3.2"))
    # On Windows, CMAKE_VERSION < 3.2 has a bug causing
    # generated file issues (see CMake rev:29b0c8c3)
    set (CTEST_USE_LAUNCHERS 0)
    message("Disabling launchers on Windows since CMake version is < 3.2")
endif()
message("CTEST_USE_LAUNCHERS=${CTEST_USE_LAUNCHERS}")
#------------------------------------------------------------------------

# Find Python
find_package(PythonInterp 2 REQUIRED)

function (get_catalyst_name outvar catalyst_editions)
    set (catalyst_name)
    foreach (edition IN LISTS catalyst_editions)
        if (catalyst_name)
            set (catalyst_name "${catalyst_name}-${edition}")
        else()
            set (catalyst_name "${edition}")
        endif()
    endforeach()
    set (${outvar} ${catalyst_name} PARENT_SCOPE)
endfunction()


function (catalyze name paraview_repo_dir out_dir editions)
    set (extra_args)
    foreach(ed IN LISTS editions)
        list(APPEND extra_args "-i")
        list(APPEND extra_args "${paraview_repo_dir}/Catalyst/Editions/${ed}")
    endforeach()

    execute_process(
        COMMAND "${PYTHON_EXECUTABLE}" "${paraview_repo_dir}/Catalyst/catalyze.py"
                # The source repo
                "-r" "${paraview_repo_dir}"
                ${extra_args}
                # the output directory
                "-o" "${out_dir}"
                # also copy tests.
                "-t"
        RESULT_VARIABLE res
        OUTPUT_VARIABLE out
        ERROR_VARIABLE  err)
    message(STATUS "Catalyze of ${editions}:\n${out}")
    if (res)
        message("Catalyze of ${editions} failed:\n${err}")
        set(success FALSE PARENT_SCOPE)
    endif ()
endfunction()

function(do_catalyst_dashboard)
    if (NOT success)
        return ()
    endif ()

    get_catalyst_name(catalyst_name "${ARGN}")

    set (original_source_directory ${CTEST_SOURCE_DIRECTORY})
    set (original_binary_directory ${CTEST_BINARY_DIRECTORY})

    set (CTEST_SOURCE_DIRECTORY "${original_binary_directory}/${catalyst_name}")
    set (CTEST_BINARY_DIRECTORY "${original_binary_directory}/${catalyst_name}-build")
    set (CTEST_BUILD_NAME "${CTEST_BUILD_NAME}-${catalyst_name}")

    # lets clean the edition catalyst source and build directories
    file (REMOVE_RECURSE "${CTEST_SOURCE_DIRECTORY}")
    file (REMOVE_RECURSE "${CTEST_BINARY_DIRECTORY}")

    # 1. Catalyst the requested edition.
    catalyze(${catalyst_name}
        "${original_source_directory}"
        # CTEST_SOURCE_DIRECTORY is now the Catalyst edition source dir.
        "${CTEST_SOURCE_DIRECTORY}"
        "${ARGN}")

    if (NOT success)
        set(success FALSE PARENT_SCOPE)
        return ()
    endif ()

    # don't run cmake to configure directly. Instead, we use cmake.sh.
    # Once CTEST_CONFIGURE_COMMAND is set, the default OPTIONS don't get passed
    # in ctest_configure(), hence we need to pass them here to the
    # configure-command itself.
    # XXX: We need to clean this. Right now, I am just duplicating code between
    # common.ctest and this.
    set (configure_args "-DCTEST_USE_LAUNCHERS:BOOL=${CTEST_USE_LAUNCHERS};${ctest_configure_options}")
    string (REPLACE ";" " " configure_args "${configure_args}")
    set (CTEST_CONFIGURE_COMMAND
      "${CTEST_SOURCE_DIRECTORY}/cmake.sh -G ${CTEST_CMAKE_GENERATOR} ${configure_args} ${CTEST_SOURCE_DIRECTORY}")

    # Make common.ctest only do the build and configure steps.
    set (ctest_stages "configure;build")

    # this ensures that common.ctest doesn't reload the file.
    unset(ctest_extra_options_file)
    include("${CTEST_SCRIPT_DIRECTORY}/common.ctest")

    if (NOT success)
        set(success FALSE PARENT_SCOPE)
        return ()
    endif ()

    # build tests.
    unset(CTEST_CONFIGURE_COMMAND)
    ctest_configure(APPEND
        SOURCE          "${CTEST_SOURCE_DIRECTORY}/Testing"
        BUILD           "${CTEST_BINARY_DIRECTORY}/Testing"
        OPTIONS         "-DPVPYTHON_EXE=${CTEST_BINARY_DIRECTORY}/bin/pvpython;-DParaView_DIR=${CTEST_BINARY_DIRECTORY}")
    ctest_build(APPEND
        BUILD           "${CTEST_BINARY_DIRECTORY}/Testing"
        RETURN_VALUE    build_result)
    ctest_test(APPEND
        BUILD           "${CTEST_BINARY_DIRECTORY}/Testing"
        RETURN_VALUE    test_result)
    ctest_submit(PARTS Test)

    if (build_result OR test_result)
        set(testing_success FALSE PARENT_SCOPE)
    endif ()

    # Create tar ball and then upload it.
    get_filename_component(catalyst_source_directory_name "${CTEST_SOURCE_DIRECTORY}" NAME)
    execute_process(COMMAND
        tar czf "${catalyst_name}.tar.gz" -C "${CTEST_SOURCE_DIRECTORY}/.."
        ${catalyst_source_directory_name})
    ctest_upload(FILES ${catalyst_name}.tar.gz)
    ctest_submit(PARTS Upload)
endfunction()

set(testing_success TRUE)
set(success TRUE)
do_catalyst_dashboard(Base)
do_catalyst_dashboard(Base Essentials)
do_catalyst_dashboard(Base Essentials Extras)
do_catalyst_dashboard(Base Essentials Extras Rendering-Base)

set(success_save ${success})

set(success TRUE)
do_catalyst_dashboard(Base Enable-Python)
do_catalyst_dashboard(Base Enable-Python Essentials)
do_catalyst_dashboard(Base Enable-Python Essentials Extras)
do_catalyst_dashboard(Base Enable-Python Essentials Extras Rendering-Base Rendering-Base-Python)

if (NOT success_save)
    set(success FALSE)
endif ()

# ctest_* commands are in a function, so the magic variable they use to trigger
# this condition is not available here. Instead, set it explicitly.
set(CTEST_RUN_CURRENT_SCRIPT FALSE)

if (NOT success OR NOT testing_success)
    message(FATAL_ERROR "Catalyst testing failed!")
endif ()
