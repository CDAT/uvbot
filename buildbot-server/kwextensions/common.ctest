# ctest_extra_options_file: file to include that defines extra variables like
#                           ctest_configure_options, ctest_test_excludes,
#                           ctest_test_include_labels,
#                           ctest_parallel_level,
#                           ctest_model : dashboard model to use.
#                           ctest_track : dashboard track
#                           CTEST_COMMAND
#                           CTEST_SOURCE_DIRECTORY
#                           CTEST_BINARY_DIRECTORY
#                           CTEST_CMAKE_GENERATOR
#                           CTEST_BUILD_NAME
#                           CTEST_SITE
#                           CTEST_BUILD_FLAGS
#                           CTEST_TEST_TIMEOUT
#                           ctest_use_empty_binary_directory
#
# ctest_stages: all, configure, build, test

if (CMAKE_VERSION VERSION_LESS "2.8.10")
    message(FATAL_ERROR "CMake is too old and cannot support launchers.  Update to at least ctest version 2.8.10")
endif()

if (ctest_extra_options_file)
    include("${ctest_extra_options_file}")
endif()

if (ctest_local_extra_options_file)
    include("${ctest_local_extra_options_file}")
endif()

#------------------------------------------------------------------------
# NOTE: Also see catalyst.common.ctest
set (CTEST_USE_LAUNCHERS 1)
# This sets the CTEST_USE_LAUNCHERS variable appropriately i.e. set it to 0
# if not supported.
# Requires that CMAKE_GENERATOR is set properly, so we set it.
set (CMAKE_GENERATOR ${CTEST_CMAKE_GENERATOR})
include(CTestUseLaunchers)

if(WIN32 AND (CMAKE_VERSION VERSION_LESS "3.2"))
    # On Windows, CMAKE_VERSION < 3.2 has a bug causing
    # generated file issues (see CMake rev:29b0c8c3)
    set (CTEST_USE_LAUNCHERS 0)
    message("Disabling launchers on Windows since CMake version is < 3.2")
endif()
message("CTEST_USE_LAUNCHERS=${CTEST_USE_LAUNCHERS}")
#------------------------------------------------------------------------

# Avoid non-ascii characters in tool output.
set(ENV{LC_ALL} C)

# if we're told to start with an empty binary dir, we do it.
if (ctest_use_empty_binary_directory AND NOT ctest_keep_build)
    message("Emptying binary directory ...")
    # XXX(cmake-3.1): ctest_empty_binary_directory() should work again.
    # not using ctest_use_empty_binary_directory() since that kept on failing
    # on windows. Seeing if this works more robustly.
    file(REMOVE_RECURSE ${CTEST_BINARY_DIRECTORY})
    file(MAKE_DIRECTORY ${CTEST_BINARY_DIRECTORY})
endif()

if (NOT ctest_keep_build)
    message("Starting ctest ${ctest_track} ... ")
    ctest_start(${ctest_model} TRACK ${ctest_track})
endif()

#==============================================================================
# Configure
#==============================================================================
set(success TRUE)
if (ctest_stages STREQUAL "all" OR ";${ctest_stages};" MATCHES ";configure;")

    if(CTEST_CMAKE_GENERATOR MATCHES "Make")
      # When using Make generator, we don't want the default CTest behaviour to
      # use "-i" build flag. Hence we do this: find 'make', and if found use
      # that explicitly.
      find_program(MAKECOMMAND make)
      if(MAKECOMMAND)
        set (ctest_configure_options "-DMAKECOMMAND:STRING=${MAKECOMMAND} ${CTEST_BUILD_FLAGS};${ctest_configure_options}")
      endif()
    endif()
    ctest_configure(
        OPTIONS         "--no-warn-unused-cli;-DCTEST_USE_LAUNCHERS:BOOL=${CTEST_USE_LAUNCHERS};${ctest_configure_options}"
        RETURN_VALUE    configure_result)

    #if (EXISTS "${CTEST_BINARY_DIRECTORY}/CMakeCache.txt")
    #    # If CMakeCache.txt is present. Let's upload that to the dashboard as well.
    #    # Helps debug issues.
    #    list(APPEND CTEST_NOTES_FILES "${CTEST_BINARY_DIRECTORY}/CMakeCache.txt")
    #endif ()
    ctest_submit(PARTS Configure Notes)

    # If configuration failed, report error and stop test.
    if (configure_result)
        message("Configure failed!")
        set(success FALSE)
    endif ()
endif ()

#==============================================================================
# Build
#==============================================================================
# Read ctest custom files from the project.
ctest_read_custom_files(${CTEST_BINARY_DIRECTORY})
set (build_number_errors 0)
if (success AND (ctest_stages STREQUAL "all" OR ";${ctest_stages};" MATCHES ";build;"))
    if (COMMAND buildbot_pre_build)
        buildbot_pre_build()
    endif ()

    ctest_build(
        RETURN_VALUE    build_result
        NUMBER_ERRORS   build_number_errors
        NUMBER_WARNINGS build_number_warnings
        APPEND)

    if (COMMAND buildbot_post_build)
        buildbot_post_build()
    endif ()

    ctest_submit(PARTS Build)

    # If build failed (or had non-zero errors), report error and stop test.
    if (build_number_errors OR build_result)
         message("Build failed with ${build_number_errors} errors and ${build_number_warnings} warnings!")
         set(success FALSE)
    endif ()
    message("BUILDBOT BUILD SUMMARY: ${build_number_warnings}/${build_number_errors}")
endif ()

#==============================================================================
# Test
#==============================================================================
if (success AND (ctest_stages STREQUAL "all" OR ";${ctest_stages};" MATCHES ";test;"))
    set(test_args)
    if (ctest_test_include_labels)
        list(APPEND test_args INCLUDE_LABEL "${ctest_test_include_labels}")
    endif ()
    if (ctest_test_includes)
        list(APPEND test_args INCLUDE "${ctest_test_includes}")
    endif ()
    if (ctest_test_excludes)
        list(APPEND test_args EXCLUDE "${ctest_test_excludes}")
    endif ()
    if (ctest_parallel_level)
        list(APPEND test_args PARALLEL_LEVEL "${ctest_parallel_level}")
    endif ()

    if (COMMAND buildbot_pre_test)
        buildbot_pre_test()
    endif ()

    ctest_test(
        ${test_args}
        RETURN_VALUE    test_result)

    if (COMMAND buildbot_post_test)
        buildbot_post_test()
    endif ()

    ctest_submit(PARTS Test)

    if (test_result)
        message("Tests failed!")
        set(success FALSE)
    endif ()
endif ()

#==============================================================================
# Upload files.
#==============================================================================
if (ctest_upload_file_patterns AND
    (ctest_stages STREQUAL "all" OR ";${ctest_stages};" MATCHES ";upload;") AND
    (NOT build_number_errors))
    set(files)
    foreach (pattern IN LISTS ctest_upload_file_patterns)
        set(cur_files)
        file(GLOB cur_files "${pattern}")
        list(APPEND files ${cur_files})
    endforeach ()
    if (files)
        message("Files to upload: ${files}")
        ctest_upload(FILES ${files})
        ctest_submit(PARTS Upload)
    endif ()
endif ()

if (COMMAND buildbot_post_all)
    buildbot_post_all()
endif ()
