# ctest_extra_options_file: file to include that defines extra variables like
#                           ctest_configure_options, ctest_test_excludes,
#                           ctest_test_include_labels,
#                           ctest_model : dashboard model to use.
#                           CTEST_COMMAND
#                           CTEST_SOURCE_DIRECTORY
#                           CTEST_BINARY_DIRECTORY
#                           CTEST_CMAKE_GENERATOR
#                           CTEST_BUILD_NAME
#                           CTEST_SITE
#                           CTEST_BUILD_FLAGS
#

# I still have no clue what this is.
set(CTEST_USE_LAUNCHERS 1)

# ctest_stages: all, configure, build, test
include("${ctest_extra_options_file}")

# Avoid non-ascii characters in tool output.
set(ENV{LC_ALL} C)

ctest_start(${ctest_model} ${CTEST_SOURCE_DIRECTORY} ${CTEST_BINARY_DIRECTORY})

#==============================================================================
# Configure
#==============================================================================
set(success TRUE)
if (ctest_stages STREQUAL "all" OR ";${ctest_stages};" MATCHES ";configure;")
    ctest_configure(OPTIONS "--no-warn-unused-cli;${ctest_configure_options}"
                    RETURN_VALUE configure_result)

    #if (EXISTS "${CTEST_BINARY_DIRECTORY}/CMakeCache.txt")
    #    # If CMakeCache.txt is present. Let's upload that to the dashboard as well.
    #    # Helps debug issues.
    #    list(APPEND CTEST_NOTES_FILES "${CTEST_BINARY_DIRECTORY}/CMakeCache.txt")
    #endif ()
    ctest_submit(PARTS Configure Notes)

    # If configuration failed, report error and stop test.
    if (NOT configure_result EQUAL "0")
        message("Configure failed!!!")
        set(success FALSE)
    endif ()
endif ()

#==============================================================================
# Build
#==============================================================================
# Read ctest custom files from the project.
ctest_read_custom_files(${CTEST_BINARY_DIRECTORY})

if (success AND (ctest_stages STREQUAL "all" OR ";${ctest_stages};" MATCHES ";build;"))
    ctest_build(RETURN_VALUE build_result
                NUMBER_ERRORS build_number_errors
                NUMBER_WARNINGS build_number_warnings
                APPEND)
    ctest_submit(PARTS Build)

    # If build failed (or had non-zero errors), report error and stop test.
    if ((NOT build_number_errors EQUAL "0") OR
        (NOT build_result EQUAL "0"))
         message("Build failed with ${build_number_errors} errors and ${build_number_warnings} warnings!!!")
         set(success FALSE)
    endif ()
    message("BUILDBOT BUILD SUMMARY: ${build_number_warnings}/${build_number_errors}")
endif ()

#==============================================================================
# Test
#==============================================================================
if (success AND (ctest_stages STREQUAL "all" OR ";${ctest_stages};" MATCHES ";test;"))
    ctest_test(
        INCLUDE_LABEL "${ctest_test_include_labels}"
        EXCLUDE "${ctest_test_excludes}"
        RETURN_VALUE test_result)
    ctest_submit(PARTS Test)

    if (NOT test_result EQUAL "0")
        message("Tests failed!!!")
        set(success FALSE)
    endif ()
endif ()

#==============================================================================
# Upload files.
#==============================================================================
if (success AND ctest_upload_file_patterns AND
    (ctest_stages STREQUAL "all" OR ";${ctest_stages};" MATCHES ";upload;"))
    set(files)
    foreach (pattern IN LISTS ctest_upload_file_patterns)
        set(cur_files)
        file(GLOB cur_files "${pattern}")
        list(APPEND files ${cur_files})
    endforeach ()
    if (files)
        message("Files to upload ${files}")
        ctest_upload(FILES ${files})
        ctest_submit(PARTS Upload)
    endif ()
endif ()
