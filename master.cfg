import json
import os
import subprocess
import sys


c = BuildmasterConfig = {}

dashdir = os.path.dirname(__file__)

json_path = os.path.join(dashdir, 'secrets.json')
with open(json_path, 'r') as fin:
    SECRETS = json.load(fin)

sys.path.append(SECRETS['buildbot_root'])

cur_hash = subprocess.check_output([
    'git', 'rev-parse',
        'HEAD',
    ],
    cwd=SECRETS['buildbot_root']).strip()

c['properties'] = {
    'buildbot_master_hash': cur_hash,
}

####### BUILDSLAVES
# import machines to build the things.
import machines

c['slaves'] = []
for machine in machines.MACHINES:
    c['slaves'].append(machine.get_buildslave())

# how do the machines ask to do the things?
c['protocols'] = {'pb': {'port': 9989}}

####### BUILDERS
# get the ways to build the things.
import projects

# setup codebase generator.
c['codebaseGenerator'] = projects.codebaseGenerator

c['builders'] = []
project_builders = {}
for project in projects.PROJECTS:
    project_builders[project] = []
    for machine in machines.MACHINES:
        builders = machine.get_builders(project)

        project_builders[project] += builders
        c['builders'] += builders

####### SCHEDULERS
# when should we do the things?
import projects.schedulers
c['schedulers'] = projects.schedulers.make_schedulers(project_builders, SECRETS)

####### POLLERS
# add ways to find things to do. pollers must be added after schedulers
# to avoid missing any change events that are processed as the pollers are
# being initialized.
import projects.pollers
c['change_source'] = projects.pollers.make_pollers(SECRETS)

####### STATUS TARGETS
# how do we let people know about the things?
import status

c['status'] = []
c['status'].append(status.make_web_status(SECRETS))

####### PROJECT IDENTITY
# identify what the things are for.

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.
c['title'] = 'Kitware Open Source'
c['titleURL'] = 'http://www.kitware.com'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.
c['buildbotURL'] = SECRETS['web_status_url']

####### DB URL
c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : 'sqlite:///state.sqlite',
}

#######################################3
### Miscellaneous configuration

# The changeHorizon key determines how many changes the master will keep a
# record of.  One place these changes are displayed is on the waterfall page.
# This parameter defaults to 0, which means keep all changes indefinitely.
c['changeHorizon'] = 50

# The buildHorizon specifies the minimum number of builds for each builder which
# should be kept on disk.
c['buildHorizon'] = 100

# The eventHorizon specifies the minimum number of events to keep--events mostly
# describe connections and disconnections of slaves, and are seldom helpful to
# developers.
c['eventHorizon'] = 50

# The logHorizon gives the minimum number of builds for which logs should be
# maintained; this parameter must be less than or equal to buildHorizon. Builds
# older than logHorizon but not older than buildHorizon will maintain their
# overall status and the status of each step, but the logfiles will be deleted.
c['logHorizon'] = 30
