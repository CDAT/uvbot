# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

#private properties.
secret_properties = {
  'gitlab_rooturl' : 'https://kwgitlab.kitwarein.com',
  'gitlab_api_token' : 'jejLjr4K1jjj17i4co8h',
  'dashboardscriptsbb_dir': '/home/utkarsh/Kitware/Dashboards/dashboardscriptsbb'
}

import sys
sys.path.append(secret_properties['dashboardscriptsbb_dir'])

from buildbot.process.properties import Property, Interpolate

c["properties"] = {
    'cdash_url' : 'https://open.cdash.org',

    # specify how the GitlabMergeRequestPoller project name maps to CDash project names.
    'cdash_project_names' : {
        'ParaView/ParaView' : 'ParaView'
    }
}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from scripts.blight import slave as BuildSlaveBlight
c['slaves'] = [BuildSlaveBlight]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from kwextensions.changes import GitlabMergeRequestPoller

poller = GitlabMergeRequestPoller(rooturl=secret_properties['gitlab_rooturl'],
  token=secret_properties['gitlab_api_token'],
  projects=["ParaView/ParaView"],
  pollInterval=30*60,
  pollAtLaunch=True)

c['change_source'] = []
c['change_source'].append(poller)

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import WarningCountingShellCommand, Compile, Test
from kwextensions.steps import CTestDashboard, CTestConfigDownload, CTestExtraOptionsDownload

update = Git(name="update",
    repourl=Property("source_repo"),
    mode='incremental',
    submodules=True,
    workdir="source",
    env={'GIT_SSL_NO_VERIFY': 'true'})
dashboard = CTestDashboard()

mergeRequestBasicTestsFactory = BuildFactory()
mergeRequestBasicTestsFactory.addStep(update)
mergeRequestBasicTestsFactory.addStep(CTestConfigDownload(
    mastersrc="%s/scripts/common.ctest" % secret_properties['dashboardscriptsbb_dir']))
mergeRequestBasicTestsFactory.addStep(CTestExtraOptionsDownload())
mergeRequestBasicTestsFactory.addStep(dashboard)

from buildbot.config import BuilderConfig

c['builders'] = []

build_configurations = {
        'shared-python-mpi-debug' : {
            "BUILD_SHARED_LIBS:BOOL" : "ON",
            "PARAVIEW_ENABLE_PYTHON:BOOL" : "OFF",
            "PARAVIEW_USE_MPI:BOOL" : "ON",
            'CMAKE_BUILD_TYPE:STRING' : 'Debug'
            },
        'static-python-mpi-release' : {
            "BUILD_SHARED_LIBS:BOOL" : "OFF",
            "PARAVIEW_ENABLE_PYTHON:BOOL" : "OFF",
            "PARAVIEW_USE_MPI:BOOL" : "ON",
            'CMAKE_BUILD_TYPE:STRING' : 'Release'
            },
        'static-python-mpi-nogui-release' : {
            "BUILD_SHARED_LIBS:BOOL" : "OFF",
            "PARAVIEW_ENABLE_PYTHON:BOOL" : "OFF",
            "PARAVIEW_USE_MPI:BOOL" : "ON",
            "PARAVIEW_BUILD_QT_GUI:BOOL" : "OFF",
            'CMAKE_BUILD_TYPE:STRING' : 'Release'
            },
        'shared-python-mpi-nogui-release' : {
            "BUILD_SHARED_LIBS:BOOL" : "ON",
            "PARAVIEW_ENABLE_PYTHON:BOOL" : "OFF",
            "PARAVIEW_USE_MPI:BOOL" : "ON",
            "PARAVIEW_BUILD_QT_GUI:BOOL" : "OFF",
            'CMAKE_BUILD_TYPE:STRING' : 'Release'
            }
        }

for key, configure_options in build_configurations.iteritems():
    properties = {}
    # add the cmake configure options
    properties['configure_options:builderconfig'] = configure_options

    # add a list of test include labels
    properties["test_include_labels:builderconfig"] = ['PARAVIEW', 'CATALYST', 'PARAVIEWWEB']
    c['builders'].append(
            BuilderConfig(name="linux-%s" % key,
                slavenames=["blight"],
                factory=mergeRequestBasicTestsFactory,
                properties = properties,
                env= {"DISPLAY" : ":0",
                    "ExternalData_OBJECT_STORES": Interpolate("%(prop:sharedresourcesroot)s/ExternalData")
                    }
                ))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.basic import AnyBranchScheduler
from buildbot.changes import filter
c['schedulers'] = []

# Create a scheduler to schedule builds when merge-request changes are seen.
# GitlabMergeRequestPoller adds the merge-request catergory to such changes.
# Hence, we use that to filter the changes being scheduled by this scheduler.
mergeRequestScheduler = AnyBranchScheduler(
    name="ParaView MergeRequest Scheduler",
    change_filter = filter.ChangeFilter(category="merge-request", project="ParaView/ParaView"),
    treeStableTimer=None,
    builderNames=["linux-%s" % key for key in build_configurations.keys()])

c['schedulers'].append(mergeRequestScheduler)


####### BUILDERS
####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("paraview","XXXXXXXX")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',  # ..or this
    pingBuilder = False,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "ParaView"
c['titleURL'] = "http://paraview.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://hera:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
