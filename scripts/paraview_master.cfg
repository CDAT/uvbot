
# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

#private properties.
secret_properties = {
  'gitlab_rooturl' : 'https://kwgitlab.kitwarein.com',
  'gitlab_api_token' : 'jejLjr4K1jjj17i4co8h',
  'dashboardscriptsbb_dir': '/home/utkarsh/Kitware/Dashboards/dashboardscriptsbb'
}

import sys
sys.path.append(secret_properties['dashboardscriptsbb_dir'])

from buildbot.process.properties import Property, Interpolate

c["properties"] = {
    'cdash_url' : 'https://open.cdash.org',

    # specify how the GitlabMergeRequestPoller project name maps to CDash project names.
    'cdash_project_names' : {
        'ParaView/ParaView' : 'ParaView',
        'ParaView/ParaViewSuperbuild' : 'ParaView',
        "Sample" : "Sample"
    }
}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from kwextensions.changes import GitlabMergeRequestPoller, GitlabIntegrationBranchPoller

mrpoller = GitlabMergeRequestPoller(rooturl=secret_properties['gitlab_rooturl'],
    token=secret_properties['gitlab_api_token'],
    projects=["ParaView/ParaView", "ParaView/ParaViewSuperbuild"],
    pollInterval=10*60, # in seconds
    pollAtLaunch=True)

masterpoller = GitlabIntegrationBranchPoller( rooturl=secret_properties['gitlab_rooturl'],
    token=secret_properties['gitlab_api_token'],
    projects={"ParaView/ParaView" : ["master"], "ParaView/ParaViewSuperbuild" : ["master"]},
    pollInterval=10*60, # in seconds
    pollAtLaunch=True)

c['change_source'] = []
c['change_source'].append(mrpoller)
c['change_source'].append(masterpoller)

####### BUILDSLAVES
# import dashboard files.
from scripts import blight, neodymius

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.

c['slaves'] = [blight.get_buildslave(), neodymius.get_buildslave()]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### BUILDERS
# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

c['builders'] = []
paraview_builders = []
paraview_builders += blight.get_builders("ParaView")
paraview_builders += neodymius.get_builders("ParaView")

paraview_superbuild_builders = []
paraview_superbuild_builders += blight.get_builders("ParaViewSuperbuild")
paraview_superbuild_builders += neodymius.get_builders("ParaViewSuperbuild")

c['builders'] += paraview_builders + paraview_superbuild_builders

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.basic import AnyBranchScheduler
from buildbot.changes import filter
schedulers = c['schedulers'] = []

# Create a scheduler to schedule builds when merge-request changes are seen.
# GitlabMergeRequestPoller adds the merge-request catergory to such changes.
# Hence, we use that to filter the changes being scheduled by this scheduler.
schedulers.append(
    AnyBranchScheduler(
        name="ParaView MergeRequest Scheduler",
        change_filter = filter.ChangeFilter(category="merge-request", project="ParaView/ParaView"),
        treeStableTimer=None,
        builderNames=[bc.name for bc in paraview_builders])
)

schedulers.append(
    AnyBranchScheduler(
        name="ParaView Integration Branch Scheduler",
        change_filter = filter.ChangeFilter(
            category="integration-branch",
            project="ParaView/ParaView"),
        treeStableTimer=None,
        builderNames=[bc.name for bc in paraview_builders])
)

schedulers.append(
    AnyBranchScheduler(
        name="ParaViewSuperbuild Integration Branch Scheduler",
        change_filter = filter.ChangeFilter(
            category="integration-branch",
            project="ParaView/ParaViewSuperbuild"),
        treeStableTimer=None,
        builderNames=[bc.name for bc in paraview_superbuild_builders])
)

schedulers.append(
    AnyBranchScheduler(
        name="ParaViewSuperbuild MergeRequest Scheduler",
        change_filter = filter.ChangeFilter(
            category="merge-request",
            project="ParaView/ParaViewSuperbuild"),
        treeStableTimer=None,
        builderNames=[bc.name for bc in paraview_superbuild_builders])
)

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.HTPasswdAprAuth("%s/webstatuspasswords" % secret_properties['dashboardscriptsbb_dir']),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',  # ..or this
    pingBuilder = False,
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "ParaView"
c['titleURL'] = "http://paraview.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://hera:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}

#######################################3
### Miscellaneous configuration

# The changeHorizon key determines how many changes the master will keep a
# record of.  One place these changes are displayed is on the waterfall page.
# This parameter defaults to 0, which means keep all changes indefinitely.
c['changeHorizon'] = 50

# The buildHorizon specifies the minimum number of builds for each builder which
# should be kept on disk.
c['buildHorizon'] = 100

# The eventHorizon specifies the minimum number of events to keep--events mostly
# describe connections and disconnections of slaves, and are seldom helpful to
# developers.
c['eventHorizon'] = 50

# The logHorizon gives the minimum number of builds for which logs should be
# maintained; this parameter must be less than or equal to buildHorizon. Builds
# older than logHorizon but not older than buildHorizon will maintain their
# overall status and the status of each step, but the logfiles will be deleted.
c['logHorizon'] = 30
